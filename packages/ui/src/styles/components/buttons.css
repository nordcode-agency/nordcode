@layer components.buttons {
    :where(
            button:not([class]),
            button[type]:not([class]),
            input[type="button"]:not([class]),
            input[type="submit"]:not([class]),
            input[type="reset"]:not([class]),
            input[type="file"]:not([class]),
            input[type="file"]:not([class])::-webkit-file-upload-button,
            input[type="file"]:not([class])::file-selector-button,
            .nc-button
        ) {
        --_button-background: var(--button-background, var(--surface-hover));
        --_button-color: var(--button-color, var(--text-hover));
        --_button-border-color: var(--button-border-color, var(--surface-hover));
        --_button-border-radius: var(--button-border-radius, var(--border-radius-medium));

        --_button-background-hover: var(--button-background-hover, var(--surface));
        --_button-background-hover-light: var(
            --button-background-hover-light,
            color-mix(in oklch, currentColor calc(var(--transparency-weaker) * 10%), transparent)
        );
        --_button-color-hover: var(--button-color-hover, var(--text));
        --_button-border-color-hover: var(--button-border-color-hover, var(--border));

        --_button-box-shadow: var(--button-box-shadow, var(--shadow-near));
        --_button-hover-shadow: var(--button-hover-shadow, var(--shadow-nearest));

        --_button-padding-inline: var(--button-padding-inline, var(--control-spacing-base, 0.75em));

        background-color: var(--_button-background);
        color: var(--_button-color);
        border: var(--border-width-thin) solid var(--_button-border-color);
        border-radius: var(--_button-border-radius);
        padding-inline: var(--_button-padding-inline);
        min-block-size: var(--control-height-base);
        padding-block: 0;
        font-family: var(--font-family-button);
        letter-spacing: var(--tracking-tight);
        font-weight: var(--font-weight-default);
        font-size: inherit;
        cursor: pointer;
        display: inline-flex;
        box-sizing: border-box;
        align-items: center;
        justify-content: center;
        text-align: center;
        position: relative;
        transition: var(--transition-duration-base) var(--ease-2);
        transition-property: box-shadow, transform;
        text-decoration: unset;
        box-shadow: var(--_button-box-shadow);
        user-select: none;
        text-box: cap alphabetic;
        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;

        line-height: var(--line-height-base);
    }

    :where(
            button:not([class]),
            button[type]:not([class]),
            input[type="button"]:not([class]),
            input[type="submit"]:not([class]),
            input[type="reset"]:not([class]),
            .nc-button
        ) {

        &:hover {
            background: var(--_button-background-hover);
            color: var(--_button-color-hover);
            border-color: var(--_button-border-color-hover);
            box-shadow: var(--_button-hover-shadow);
        }

        &[aria-pressed="true"] {
            box-shadow: none;
            transform: none;
            font-weight: var(--font-weight-active);
        }

        &:is(:active, .-active) {
            background-color: var(--_button-background-hover);
            color: var(--_button-color-hover);
            border-color: var(--_button-border-color-hover);

            box-shadow: none;
            transform: none;
            filter: contrast(1.2) saturate(1.1);
            backdrop-filter: contrast(2);
        }

        &[disabled] {
            --_button-background: none !important;
            --_button-background-hover: none !important;
            --_button-color: var(--color-text-subtle) !important;
            --_button-color-hover: var(--_button-color) !important;
            --_button-border-color: var(--color-text-subtle) !important;
            --_button-border-color-hover: var(--_button-border-color);

            box-shadow: none !important;
            transform: none !important;
            filter: contrast(0.72) opacity(0.72);
            cursor: not-allowed;
        }

        &.-outline {
            background-color: transparent;
            color: var(--text);
            border-color: var(--border);

            &:hover {
                background-color: var(--_button-background-hover-light);
                color: var(--text);
                border-color: var(--border-hover);
            }
        }

        &.-stealth {
            background-color: transparent;
            border-color: transparent;
            color: var(--text);

            &:hover {
                background-color: var(--_button-background-hover-light);
                color: var(--text);
                border-color: transparent;
            }

            box-shadow: none !important;
            transform: none !important;
        }

        &.-small {
            --_button-padding-inline: var(--control-spacing-near, 0.5em);
            min-block-size: var(--control-height-small);
        }

        &.-round {
            --_button-border-radius: var(--border-radius-round);
        }

        &.-offset {
            --_button-offset-distance: var(
                --button-offset-distance,
                calc(-1 * var(--control-spacing-minimal))
            );
            --_button-offset-distance-hover: var(
                --button-offset-distance-hover,
                calc(-0.5 * var(--control-spacing-minimal))
            );

            --_button-transform: translate(
                var(--_button-offset-distance),
                var(--_button-offset-distance)
            );
            --_button-hover-transform: translate(
                var(--_button-offset-distance-hover),
                var(--_button-offset-distance-hover)
            );

            --button-box-shadow: calc(var(--_button-offset-distance) / -2)
                calc(var(--_button-offset-distance) / -2) 0 0 var(--shadow-color),
                calc(var(--_button-offset-distance) * -1) calc(var(--_button-offset-distance) * -1)
                0 0 var(--shadow-color), calc(var(--_button-offset-distance) * -1)
                calc(var(--_button-offset-distance) * -1) calc(var(--_button-offset-distance) * -2)
                0 var(--shadow-color);

            --button-hover-shadow: calc(var(--_button-offset-distance-hover) * -1)
                calc(var(--_button-offset-distance-hover) * -1) 0 0 var(--shadow-color),
                calc(var(--_button-offset-distance-hover) * -1)
                calc(var(--_button-offset-distance-hover) * -1)
                calc(var(--_button-offset-distance-hover) / -2) 0 var(--shadow-color);

            inset-block-start: calc(var(--_button-offset-distance) * -1);
            inset-inline-start: calc(var(--_button-offset-distance) * -1);
            transform: var(--_button-transform);

            &:hover {
                transform: var(--_button-hover-transform);
            }
        }

        /*
         * for inline icons
         */

        &:has(svg) {
            gap: var(--control-spacing-tiny, 0.25em);
        }

        /*
             * If there is no text node for the button,
             * it is assumed that an `aria-label` is that
             * and the button will be styled as an icon button.
             */

        &[aria-label],
        &.-icon {
            --_button-border-radius: var(--border-radius-round);
            padding: 0;
            aspect-ratio: 1;
            fill: currentColor;

            &:after {
                content: "";
                inline-size: max(var(--control-height-base), 100%);
                block-size: max(var(--control-height-base), 100%);
                aspect-ratio: 1;
                border-radius: 100%;
                inset-inline-start: calc(-0.5 * (var(--control-height-base) - 100%));
                inset-block-start: calc(-0.5 * (var(--control-height-base) - 100%));
                position: absolute;
                z-index: -1;
                pointer-events: all;
            }

            & > svg {
                pointer-events: none;
            }
        }

        &.-icon.-small {
            padding: 0;
        }

        &.-aligned {
            margin-inline: calc(-1 * var(--_button-padding-inline));
        }
    }

    :where(input[type="file"]:not([class])) {
        color: var(--_input-color);
        background-color: var(--_input-background);
        border: var(--_input-border);
        min-block-size: var(--control-height-base);
        padding-inline-end: var(--contol-spacing-near, 0.5em);
        padding-inline-start: 0;
        border-radius: var(--_input-border-radius);
    }

    :where(input[type="file"]:not([class]))::-webkit-file-upload-button,
    :where(input[type="file"]:not([class]))::file-selector-button {
        background-color: var(--_button-background);
        color: var(--_button-color);
        padding-inline: var(--_button-padding-inline);
        margin-inline-end: var(--contol-spacing-near, 0.5em);
        cursor: pointer;
        box-shadow: none;
        min-block-size: calc(var(--control-height-base) - var(--border-width-thin));
        border: none;
        border-inline-end: var(--border-width-thin) solid var(--color-border-base);
        transform: none;
        inset-block-start: 0;
        inset-inline-start: 0;
        border-start-end-radius: 0;
        border-end-end-radius: 0;
    }

    :where(button[type="reset"]:not([class]), .nc-button.-destructive) {
        --text: var(--color-status-danger-emphasis);
        --color: var(--color-status-danger-base);
        --surface: var(--color-status-danger-surface);
        --border: var(--color-status-danger-base);

        --text-hover: var(--color-status-danger-contrast);
        --color-hover: var(--color-status-danger-contrast);
        --surface-hover: var(--color-status-danger-base);
        --border-hover: var(--color-status-danger-base);
    }
}
